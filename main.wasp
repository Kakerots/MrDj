app MrDj {
  wasp: {
    version: "^0.12.3"
  },
  title: "MrDj",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
    id Int @id @default(autoincrement())
    requests Request[]
psl=}

entity Request {=psl
    id Int @id @default(autoincrement())
    trackName String
    bpm Float
    genre String
    user User @relation(fields: [userId], references: [id])
    userId Int
    status String @default("Pending")
    price Float
psl=}

action createRequest {
  fn: import { createRequest } from "@src/actions.js",
  entities: [User, Request]
}

action acceptRequest {
  fn: import { acceptRequest } from "@src/actions.js",
  entities: [User, Request]
}

action rejectRequest {
  fn: import { rejectRequest } from "@src/actions.js",
  entities: [User, Request]
}

query getRequests {
  fn: import { getRequests } from "@src/queries.js",
  entities: [User, Request]
}

query getRequest {
  fn: import { getRequest } from "@src/queries.js",
  entities: [User, Request]
}

route RequestsRoute { path: "/requests", to: RequestsPage }
page RequestsPage {
  component: import RequestsPage from "@src/pages/Requests.jsx",
  authRequired: true
}

route RequestRoute { path: "/requests/:requestId", to: RequestPage }
page RequestPage {
  component: import RequestPage from "@src/pages/Request.jsx",
  authRequired: true
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import Dashboard from "@src/pages/Dashboard.jsx",
  authRequired: true
}